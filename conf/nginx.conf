# This is the backend application we are protecting with OpenID Connect
upstream my_backend {
    zone my_backend 64k;
    server 10.0.0.1:80;
}

# Custom log format to include the 'sub' claim in the REMOTE_USER field
log_format main_jwt '$remote_addr $jwt_claim_sub $remote_user [$time_local] "$request" $status '
                    '$body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';

# nginScript functions for code exchange and hashing for secure nonce validation
js_include conf.d/openid_connect.js;
js_set $requestid_hash hashRequestId;
js_set $auth_token getAuthToken;

# The frontend server - reverse proxy with OpenID Connect authentication
#
server {
    include conf.d/openid_connect.server_conf; # Authorization code flow and Relying Party processing

    # OpenID Connect Provider (IdP) configuration
    set $oidc_jwt_keyfile     /etc/nginx/my_idp_jwk.json;
    set $oidc_authz_endpoint  "https://partnerpoc.oktapreview.com/oauth2/v1/authorize";
    set $oidc_token_endpoint  "https://partnerpoc.oktapreview.com/oauth2/v1/token";
    set $oidc_client          "0oagfbbn3gHhSxJWL0h7";
    set $oidc_client_secret   "{{my_client_secret}}";
    set $oidc_token_type      "id_token"; # Session token (access_token or id_token)
    set $oidc_hmac_key        "some_unique_string"; # This should be unique for every NGINX instance/cluster

    listen 8010; # Use SSL/TLS in production

    location / {
        # This site is protected with OpenID Connect
        auth_jwt "" token=$cookie_auth_token;
        auth_jwt_key_file $oidc_jwt_keyfile;

        # Absent/invalid OpenID Connect token will (re)start auth process
        error_page 401 @oidc_auth;

        # Successfully authenticated users are proxied to the backend,
        # with 'sub' claim passed as HTTP header
        proxy_set_header username $jwt_claim_sub;

        add_header x-okta-sub $jwt_claim_sub;
        add_header x-okta-email $jwt_claim_email;
        add_header x-okta-name $jwt_claim_name;
        add_header x-okta-preferred_username $jwt_claim_preferred_username;

        # proxy_pass http://my_backend; # The backend site/app

        # return 200 $jwt_claim_sub;

        proxy_pass http://okta-headers.herokuapp.com;

        access_log /var/log/nginx/access.log main_jwt;
    }
}

# vim: syntax=nginx